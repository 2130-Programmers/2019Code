// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2130.AlphaHydrae.subsystems;

import org.usfirst.frc2130.AlphaHydrae.Robot;
import org.usfirst.frc2130.AlphaHydrae.commands.moveElevatorCommand;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.Solenoid;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class elevatorSubsystem extends Subsystem {

    private DigitalInput lowProx;
    private DigitalInput midProx;
    private DigitalInput maxProx;
    private WPI_TalonSRX elevatorMotorMaster;
    private WPI_TalonSRX elevatorMotorSlave;
    private WPI_TalonSRX rearFoot;
    private Solenoid elevatorBrakeSolenoid;
    private String desiredProx;

    public elevatorSubsystem() {

        lowProx = new DigitalInput(0);
        addChild("lowProx",lowProx);
        
        
        midProx = new DigitalInput(1);
        addChild("midProx",midProx);
        
        
        maxProx = new DigitalInput(2);
        addChild("maxProx",maxProx);
        
        
        elevatorMotorMaster = new WPI_TalonSRX(8);
        
        elevatorMotorSlave = new WPI_TalonSRX(9);

        rearFoot = new WPI_TalonSRX(6);

        elevatorBrakeSolenoid = new Solenoid(4);

        elevatorMotorSlave.follow(elevatorMotorMaster);

        desiredProx = "Low";

    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new moveElevatorCommand());

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void moveFoot() {
        rearFoot.set(Robot.oi.operatorJoystick.getRawAxis(3)); //TODO: Set the AXIS
    }

    public void killFoot() {
        rearFoot.set(0);
    }

    public void returnFoot() {
        if (Robot.climbingPIDSubsystem.getProx(false)) {
            rearFoot.configPeakOutputReverse(-0.2);
        } else {
            rearFoot.configPeakOutputReverse(-0.8);
        }
        
        rearFoot.set(-1);
    }

    // This returns what prox sensor we are hitting
    public boolean getProx(String prox) {
        if (prox == "Max") {
            return !maxProx.get();
        } else if (prox == "Mid") {
            return !midProx.get();
        } else {
            return !lowProx.get();
        }
    }

    public void setBrakeState(boolean state){
        elevatorBrakeSolenoid.set(state);
    }

    public void resetpeakoutput() {
    	elevatorMotorMaster.configPeakOutputForward(1, 0);
    	elevatorMotorMaster.configPeakOutputReverse(-1, 0);
    }

    // This moves the elevator using a boolean
    public void moveElevator(boolean climbingMode, double speed) {
        if (!climbingMode) {
            if (getProx(desiredProx)) {
                disableElevator();
            } else {
                if (Robot.elevatorPIDSubsystem.elevatorHeight() < 8000) {
                    setMaxMinOutput(0.1,-0.7);
                }
                if (Robot.elevatorPIDSubsystem.elevatorHeight() >= 8000) {
                    setMaxMinOutput(0.5,-0.7);
                }
                setBrakeState(true);
                elevatorMotorMaster.set(Robot.oi.operatorJoystick.getRawAxis(1));
            }  
        } else {
            elevatorMotorMaster.set(speed);
        }
    }

    public void zeroTheTalon() {
    	elevatorMotorSlave.setSelectedSensorPosition(0, 0, 0);
    }

    public void homeEncoder() {
    	if (getProx("Low")) {
    	    zeroTheTalon();
    	}
    }

    /* This tells us the output of the Talon, and whether its in the forward or backward direction */
    public double motorOutput() {
    	return elevatorMotorMaster.getMotorOutputPercent();
    }

    // Disables the elevator, and turns on the brake
    public void disableElevator() {
        elevatorMotorMaster.set(0);
        setBrakeState(false);
    }

    public void setMaxMinOutput(double max, double min) {
        elevatorMotorMaster.configPeakOutputForward(max, 0);
        elevatorMotorMaster.configPeakOutputReverse(min, 0);
    }

    // Makes sure the elevator brake is not on when we start
    public void startupRoutine() {
        setBrakeState(false);
        desiredProx = "Low";
    }

    // Sets the output we want from the prox sensor
    public void setDesiredOutput(String setDesiredProx) {
        desiredProx = setDesiredProx;
    }

    // Returns our info from the prox
    public String returnDesiredProx() {
        return desiredProx;
    }

    public double elevatorEncoderValue() {
        return -elevatorMotorSlave.getSelectedSensorPosition(0);
    }

    public void zeroElevatorEncoder() {
        elevatorMotorSlave.setSelectedSensorPosition(0, 0, 0);
    }

    public void stopAllMotors() {
    	elevatorMotorMaster.stopMotor();
    }
}
